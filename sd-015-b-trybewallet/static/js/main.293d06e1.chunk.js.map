{"version":3,"sources":["reducers/user.js","reducers/wallet.js","reducers/index.js","store/index.js","services/fetchExchangeRates.js","actions/index.js","pages/Login.js","components/ExpenseCurrency.jsx","components/ExpenseDescription.jsx","components/ExpenseMethod.jsx","components/ExpenseTag.jsx","components/ExpenseValue.jsx","components/Expenses.jsx","components/Header.jsx","components/TableExpenses.jsx","pages/Wallet.js","App.js","serviceWorker.js","index.js"],"names":["INITIAL_STATE","email","user","state","action","type","payload","exchangeRates","expenses","currencies","wallet","filter","expense","id","rootReducer","combineReducers","store","createStore","composeWithDevTools","applyMiddleware","thunk","fetchExchangeRates","fetch","then","response","json","ok","Promise","resolve","reject","actionFetchExchangeRates","dispatch","a","error","Login","disableSubmit","handleChange","bind","enableSubmitButton","handleSubmit","target","name","value","this","setState","password","isValidEmail","test","isValidPassword","length","event","preventDefault","props","history","dispatchUser","push","htmlFor","data-testid","onChange","disabled","onClick","React","Component","connect","actionSendUserLogin","ExpenseCurrency","allCurrencies","updateExchangeRates","getExchangeRates","theCurrencies","Object","keys","key","map","currency","index","ExpenseDescription","ExpenseMethod","ExpenseTag","ExpenseValue","inputValue","Expenses","Number","description","method","tag","submitExpense","dispatchExpense","previousState","actionSendExpenses","Header","updateExpenses","previousProps","totalExpenses","undefined","reduce","acc","currExpense","ask","toFixed","TableExpenses","deleteExpense","rows","document","getElementsByTagName","console","log","receivedId","dispatchDelete","title","currentExchangeRate","parsedAsk","split","deleteExpenseAction","Wallet","App","path","component","Boolean","window","location","hostname","match","ReactDOM","render","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","message"],"mappings":"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","file":"static/js/main.293d06e1.chunk.js","sourcesContent":["const SEND_USER_LOGIN = 'SEND_USER_LOGIN';\r\n\r\nconst INITIAL_STATE = {\r\n  email: '',\r\n};\r\n\r\n// reducer user onde type serão os títulos (verbos, como SEND_USER_LOGIN) recebidos das actions\r\n// e payloads serão os dados contidos nessas actions\r\nconst user = (state = INITIAL_STATE, action) => {\r\n  switch (action.type) {\r\n  case SEND_USER_LOGIN:\r\n    return {\r\n      ...state,\r\n      email: action.payload,\r\n    };\r\n\r\n  default:\r\n    return state;\r\n  }\r\n};\r\n\r\nexport default user;\r\n","const SEND_EXPENSES = 'SEND_EXPENSES';\r\nconst GET_EXCHANGES_SUCCESS = 'GET_EXCHANGES_SUCCESS';\r\nconst DELETE_EXPENSE = 'DELETE_EXPENSE';\r\n\r\nconst INITIAL_STATE = {\r\n  exchangeRates: {},\r\n  expenses: [],\r\n  currencies: [],\r\n};\r\n\r\nconst wallet = (state = INITIAL_STATE, action) => {\r\n  switch (action.type) {\r\n  case SEND_EXPENSES:\r\n    return {\r\n      ...state,\r\n      expenses: [...state.expenses, action.payload],\r\n    };\r\n\r\n  case GET_EXCHANGES_SUCCESS:\r\n    return {\r\n      ...state,\r\n      exchangeRates: action.payload.exchangeRates,\r\n    };\r\n\r\n  case DELETE_EXPENSE:\r\n    return {\r\n      ...state,\r\n      expenses: state.expenses.filter((expense) => expense.id !== action.payload.id),\r\n    };\r\n\r\n  default:\r\n    return state;\r\n  }\r\n};\r\n\r\nexport default wallet;\r\n","import { combineReducers } from 'redux';\r\nimport user from './user';\r\nimport wallet from './wallet';\r\n\r\nconst rootReducer = combineReducers({ user, wallet });\r\n\r\nexport default rootReducer;\r\n","import { createStore, applyMiddleware } from 'redux';\r\nimport { composeWithDevTools } from 'redux-devtools-extension';\r\nimport thunk from 'redux-thunk';\r\nimport rootReducer from '../reducers';\r\n\r\nconst store = createStore(\r\n  rootReducer,\r\n  composeWithDevTools(applyMiddleware(thunk)),\r\n);\r\n\r\nexport default store;\r\n","const API_URL = 'https://economia.awesomeapi.com.br/json/all';\r\nconst fetchExchangeRates = () => (\r\n  fetch(API_URL)\r\n    .then((response) => (\r\n      response\r\n        .json()\r\n        .then((json) => (response.ok ? Promise.resolve(json) : Promise.reject(json)))\r\n    ))\r\n);\r\n\r\nexport default fetchExchangeRates;\r\n","import fetchExchangeRates from '../services/fetchExchangeRates';\r\n\r\nconst SEND_USER_LOGIN = 'SEND_USER_LOGIN';\r\nconst SEND_EXPENSES = 'SEND_EXPENSES';\r\nconst GET_EXCHANGES_SUCCESS = 'GET_EXCHANGES_SUCCESS';\r\nconst GET_EXCHANGES_FAIL = 'GET_EXCHANGES_FAIL';\r\nconst DELETE_EXPENSE = 'DELETE_EXPENSE';\r\n\r\nexport const actionSendUserLogin = (payload) => ({\r\n  type: SEND_USER_LOGIN,\r\n  payload,\r\n});\r\n\r\nexport const actionSendExpenses = (payload) => ({\r\n  type: SEND_EXPENSES,\r\n  payload,\r\n});\r\n\r\nexport const getExchangesSuccess = (payload) => ({\r\n  type: GET_EXCHANGES_SUCCESS,\r\n  payload,\r\n});\r\n\r\nexport const getExchangesFail = (error) => ({\r\n  type: GET_EXCHANGES_FAIL,\r\n  error,\r\n});\r\n\r\nexport const deleteExpenseAction = (payload) => ({\r\n  type: DELETE_EXPENSE,\r\n  payload,\r\n});\r\n\r\n// Função thunk para receber a Promise de fetchExchangeRates(), aguardar resultado da requisição\r\n// e despachar ao reducer wallet caso tenha sucesso.\r\n// Obtive ajuda do mentor André Horman, em especial para entender que eu precisava receber o estado (state)\r\n// para poder compor o despacho dos dados da despesa e salvar no Estado Global.\r\n\r\nexport const actionFetchExchangeRates = (state) => async (dispatch) => {\r\n  try {\r\n    const response = await fetchExchangeRates();\r\n    return (dispatch(getExchangesSuccess({\r\n      ...state,\r\n      exchangeRates: response,\r\n    })));\r\n  } catch (error) {\r\n    dispatch(getExchangesFail('Não conseguimos encontrar o que foi solicitado'));\r\n  }\r\n};\r\n","import PropTypes from 'prop-types';\r\nimport React from 'react';\r\nimport { connect } from 'react-redux';\r\nimport { actionSendUserLogin } from '../actions';\r\n\r\nclass Login extends React.Component {\r\n  constructor() {\r\n    super();\r\n    this.state = {\r\n      disableSubmit: true,\r\n    };\r\n    this.handleChange = this.handleChange.bind(this);\r\n    this.enableSubmitButton = this.enableSubmitButton.bind(this);\r\n    this.handleSubmit = this.handleSubmit.bind(this);\r\n  }\r\n\r\n  handleChange({ target }) {\r\n    const { name, value } = target;\r\n    this.setState({\r\n      [name]: value,\r\n    }, () => this.enableSubmitButton());\r\n  }\r\n\r\n  enableSubmitButton() {\r\n    const { email, password } = this.state;\r\n    const MIN_PASS_LENGTH = 6;\r\n    const isValidEmail = /\\S+@\\S+\\.\\S+/.test(email);\r\n    const isValidPassword = password ? password.length >= MIN_PASS_LENGTH : false;\r\n    if (isValidEmail && isValidPassword) {\r\n      this.setState({ disableSubmit: false });\r\n    } else {\r\n      this.setState({ disableSubmit: true });\r\n    }\r\n  }\r\n\r\n  handleSubmit(event) {\r\n    event.preventDefault();\r\n    const { history, dispatchUser } = this.props;\r\n    const { email } = this.state;\r\n    dispatchUser(email);\r\n    history.push('/carteira');\r\n  }\r\n\r\n  render() {\r\n    const { handleChange, handleSubmit } = this;\r\n    const { disableSubmit } = this.state;\r\n    return (\r\n      <div>\r\n        <h2>Login</h2>\r\n        <label htmlFor=\"email-input\">\r\n          Email:\r\n          <input\r\n            type=\"email\"\r\n            name=\"email\"\r\n            id=\"email-input\"\r\n            data-testid=\"email-input\"\r\n            onChange={ handleChange }\r\n          />\r\n        </label>\r\n        <label htmlFor=\"password-input\">\r\n          Senha:\r\n          <input\r\n            type=\"password\"\r\n            name=\"password\"\r\n            id=\"password-input\"\r\n            data-testid=\"password-input\"\r\n            onChange={ handleChange }\r\n          />\r\n        </label>\r\n        <button\r\n          type=\"submit\"\r\n          disabled={ disableSubmit }\r\n          onClick={ (event) => handleSubmit(event) }\r\n        >\r\n          Entrar\r\n        </button>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nLogin.propTypes = {\r\n  dispatchUser: PropTypes.func.isRequired,\r\n  history: PropTypes.shape({\r\n    push: PropTypes.func,\r\n  }).isRequired,\r\n};\r\n\r\nconst mapDispatchToProps = (dispatch) => ({\r\n  dispatchUser: (payload) => dispatch(actionSendUserLogin(payload)),\r\n});\r\n\r\nexport default connect(null, mapDispatchToProps)(Login);\r\n\r\n/** referência 1:\r\n * pesquisa em https://qastack.com.br/programming/46155/how-to-validate-an-email-address-in-javascript para\r\n * obter expressão regular que valida endereço de email\r\n * Ajuda dos amigos: João Paulo Pereira, Valdênio e Rafael Moura\r\n */\r\n","import PropTypes from 'prop-types';\r\nimport React, { Component } from 'react';\r\nimport { connect } from 'react-redux';\r\nimport { actionFetchExchangeRates } from '../actions';\r\n\r\nclass ExpenseCurrency extends Component {\r\n  constructor() {\r\n    super();\r\n    this.state = {\r\n      allCurrencies: [],\r\n    };\r\n    this.updateExchangeRates = this.updateExchangeRates.bind(this);\r\n  }\r\n\r\n  componentDidMount() {\r\n    this.updateExchangeRates();\r\n  }\r\n\r\n  async updateExchangeRates() {\r\n    const { getExchangeRates } = this.props;\r\n    await getExchangeRates();\r\n    const { exchangeRates } = this.props;\r\n    const theCurrencies = Object.keys(exchangeRates).filter((key) => key !== 'USDT');\r\n    this.setState({\r\n      allCurrencies: theCurrencies,\r\n    });\r\n  }\r\n\r\n  render() {\r\n    const { allCurrencies } = this.state;\r\n    const { handleChange } = this.props;\r\n    return (\r\n      <label htmlFor=\"currency\">\r\n        {' Moeda: '}\r\n        <select\r\n          data-testid=\"currency-input\"\r\n          name=\"currency\"\r\n          id=\"currency\"\r\n          onChange={ handleChange }\r\n        >\r\n          {allCurrencies.map((currency, index) => (\r\n            <option key={ `${currency}${index}` } value={ currency }>{ currency }</option>\r\n          ))}\r\n        </select>\r\n      </label>\r\n    );\r\n  }\r\n}\r\n\r\nExpenseCurrency.propTypes = {\r\n  exchangeRates: PropTypes.shape().isRequired,\r\n  getExchangeRates: PropTypes.func.isRequired,\r\n  handleChange: PropTypes.func.isRequired,\r\n};\r\n\r\nconst mapStateToProps = (state) => ({\r\n  exchangeRates: state.wallet.exchangeRates,\r\n});\r\n\r\nconst mapDispatchToProps = (dispatch) => ({\r\n  getExchangeRates: (payload) => dispatch(actionFetchExchangeRates(payload)),\r\n});\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(ExpenseCurrency);\r\n","import PropTypes from 'prop-types';\r\nimport React, { Component } from 'react';\r\n\r\nclass ExpenseDescription extends Component {\r\n  render() {\r\n    const { handleChange } = this.props;\r\n    return (\r\n      <label htmlFor=\"description\">\r\n        { ' Descrição: '}\r\n        <input\r\n          data-testid=\"description-input\"\r\n          type=\"text\"\r\n          name=\"description\"\r\n          id=\"description\"\r\n          onChange={ handleChange }\r\n        />\r\n      </label>\r\n    );\r\n  }\r\n}\r\n\r\nExpenseDescription.propTypes = {\r\n  handleChange: PropTypes.func.isRequired,\r\n};\r\n\r\nexport default ExpenseDescription;\r\n","import PropTypes from 'prop-types';\r\nimport React, { Component } from 'react';\r\n\r\nclass ExpenseMethod extends Component {\r\n  render() {\r\n    const { handleChange } = this.props;\r\n    return (\r\n      <label htmlFor=\"method\">\r\n        { ' Método: ' }\r\n        <select\r\n          data-testid=\"method-input\"\r\n          name=\"method\"\r\n          id=\"method\"\r\n          onChange={ handleChange }\r\n        >\r\n          <option value=\"Dinheiro\">Dinheiro</option>\r\n          <option value=\"Cartão de crédito\">Cartão de crédito</option>\r\n          <option value=\"Cartão de débito\">Cartão de débito</option>\r\n        </select>\r\n      </label>\r\n    );\r\n  }\r\n}\r\n\r\nExpenseMethod.propTypes = {\r\n  handleChange: PropTypes.func.isRequired,\r\n};\r\n\r\nexport default ExpenseMethod;\r\n","import PropTypes from 'prop-types';\r\nimport React, { Component } from 'react';\r\n\r\nclass ExpenseTag extends Component {\r\n  render() {\r\n    const { handleChange } = this.props;\r\n    return (\r\n      <label htmlFor=\"tag\">\r\n        {' Categoria: '}\r\n        <select\r\n          data-testid=\"tag-input\"\r\n          name=\"tag\"\r\n          id=\"tag\"\r\n          onChange={ handleChange }\r\n        >\r\n          <option value=\"Alimentação\">Alimentação</option>\r\n          <option value=\"Lazer\">Lazer</option>\r\n          <option value=\"Trabalho\">Trabalho</option>\r\n          <option value=\"Transporte\">Transporte</option>\r\n          <option value=\"Saúde\">Saúde</option>\r\n        </select>\r\n      </label>\r\n    );\r\n  }\r\n}\r\n\r\nExpenseTag.propTypes = {\r\n  handleChange: PropTypes.func.isRequired,\r\n};\r\n\r\nexport default ExpenseTag;\r\n","import PropTypes from 'prop-types';\r\nimport React, { Component } from 'react';\r\n\r\nclass ExpenseValue extends Component {\r\n  render() {\r\n    const { handleChange, inputValue } = this.props;\r\n    return (\r\n      <label htmlFor=\"value\">\r\n        {'Valor: '}\r\n        <input\r\n          data-testid=\"value-input\"\r\n          type=\"text\"\r\n          name=\"value\"\r\n          id=\"value\"\r\n          onChange={ handleChange }\r\n          value={ inputValue }\r\n        />\r\n      </label>\r\n    );\r\n  }\r\n}\r\n\r\nExpenseValue.propTypes = {\r\n  handleChange: PropTypes.func.isRequired,\r\n  inputValue: PropTypes.number.isRequired,\r\n};\r\n\r\nexport default ExpenseValue;\r\n","import PropTypes from 'prop-types';\r\nimport React, { Component } from 'react';\r\nimport { connect } from 'react-redux';\r\nimport { actionFetchExchangeRates, actionSendExpenses } from '../actions';\r\nimport ExpenseCurrency from './ExpenseCurrency';\r\nimport ExpenseDescription from './ExpenseDescription';\r\nimport ExpenseMethod from './ExpenseMethod';\r\nimport ExpenseTag from './ExpenseTag';\r\nimport ExpenseValue from './ExpenseValue';\r\n\r\nclass Expenses extends Component {\r\n  constructor() {\r\n    super();\r\n    this.state = {\r\n      id: 0,\r\n      value: Number(0),\r\n      description: '',\r\n      currency: '',\r\n      method: 'Dinheiro',\r\n      tag: 'Alimentação',\r\n    };\r\n    this.handleChange = this.handleChange.bind(this);\r\n    this.submitExpense = this.submitExpense.bind(this);\r\n    this.updateExchangeRates = this.updateExchangeRates.bind(this);\r\n  }\r\n\r\n  async updateExchangeRates() {\r\n    const { getExchangeRates } = this.props;\r\n    await getExchangeRates();\r\n  }\r\n\r\n  handleChange({ target: { id, value } }) {\r\n    this.setState({ [id]: value });\r\n  }\r\n\r\n  submitExpense(event) {\r\n    event.preventDefault();\r\n    this.updateExchangeRates();\r\n    const { dispatchExpense, exchangeRates } = this.props;\r\n    const { id, value, description, currency, method, tag } = this.state;\r\n    const oneExpense = { id, value, description, currency, method, tag, exchangeRates };\r\n    dispatchExpense(oneExpense);\r\n    this.setState((previousState) => ({ id: previousState.id + 1 }));\r\n    this.setState({ value: 0 });\r\n  }\r\n\r\n  // Observação sobre o trecho ', () => rates(expense)', que estava no projeto antes da correção:\r\n  // Importante lembrar de passar como callback como segundo parâmetro de this.setState({}, callback) em\r\n  // handleSubmit() para fazer o despacho do objeto despesa(expense) presente no estado local como carga útil (payload).\r\n  // para, de forma assíncrona(com uso da função 'thunk' actionFetchExchangeRates() para as actions de wallet(reducer).\r\n  // Obtive ajuda do mentor André Horman para corrigir meus problemas de fluxo e da aplicação de uma função que retorna\r\n  // outra função(thunk) afim de que o Estado Global possa receber informações de uma API, que funciona de forma assíncrona.\r\n  // Mas o uso da função dessa forma (considerando como estava o fluxo do meu projeto naquele momento) acabou gerando um erro\r\n  // fazendo com que a partir da segunda despesa cadastrada todas recebessem id= 1.\r\n  // Aqui fica o agradecimento ao amigo João Paulo Pereira pela ajuda que me deu para entender e aplicar uma lógica melhor\r\n  // e muito simples para resolver o problema com o id.\r\n\r\n  render() {\r\n    const { value } = this.state;\r\n    return (\r\n      <form>\r\n        <ExpenseValue handleChange={ this.handleChange } inputValue={ value } />\r\n        <ExpenseDescription handleChange={ this.handleChange } />\r\n        <ExpenseCurrency handleChange={ this.handleChange } />\r\n        <ExpenseMethod handleChange={ this.handleChange } />\r\n        <ExpenseTag handleChange={ this.handleChange } />\r\n        <button\r\n          type=\"submit\"\r\n          onClick={ (event) => this.submitExpense(event) }\r\n        >\r\n          Adicionar despesa\r\n        </button>\r\n      </form>\r\n    );\r\n  }\r\n}\r\n\r\nExpenses.propTypes = {\r\n  dispatchExpense: PropTypes.func.isRequired,\r\n  exchangeRates: PropTypes.shape().isRequired,\r\n  getExchangeRates: PropTypes.func.isRequired,\r\n};\r\n\r\nconst mapStateToProps = (state) => ({\r\n  expenses: state.wallet.expenses,\r\n  exchangeRates: state.wallet.exchangeRates,\r\n});\r\n\r\nconst mapDispatchToProps = (dispatch) => ({\r\n  dispatchExpense: (payload) => dispatch(actionSendExpenses(payload)),\r\n  getExchangeRates: (payload) => dispatch(actionFetchExchangeRates(payload)),\r\n});\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(Expenses);\r\n\r\n/* PR do Gabriel Alves - https://github.com/tryber/sd-015-b-project-trybewallet/pull/52\r\n* Que consultei para entender o meu erro de lógica que estava fazendo com que a função getExchangeRates()-thunk- ou:\r\n* - fosse chamada uma vez a mais do que o teste prevê;\r\n* - fosse chamada uma vez a menos (não atualizava como o requisito pedia);\r\n* - o componente não recebia a propriedade exchangeRates;\r\n* Assim, escrevi a função updateExchangeRates() para cumprir esta solicitação e apliquei neste componente e também no componente filho\r\n* ExpenseCurrency, que renderiza um seletor contendo as siglas das moedas para a escolha da pessoa usuária.\r\n* Assim, as vezes previstas no teste, em que a aplicação consome a API de taxa de câmbio são atendidas neste componente e é cumprido o\r\n* requisito 4 do projeto.\r\n* E já é antecipada a previsão do requisito 5, faltando apenas a filtragem solicitada. Esta filtragem é feita na linha 23 do sub-componente\r\n* ExpenseCurrency.\r\n* Agradeço ao Gabriel Alves pela ajuda(inclusive em sua participação na revisão de código feita no fechamento do último dia deste projeto).\r\n*/\r\n\r\n/** ref 1 (que estava nos commits anteriores)\r\n * Nas referidas funções obtive ajuda do Denis Jonathan para criar uma função que cuida do atributo 'id' e também\r\n * para configurar a função componentDidUpdate() afim de gravar o objeto 'expense' dentro do vetor expenses e depois\r\n * despachar para o estado global o vetor expenses contendo o objeto já com seu id.\r\n * Existia também um problema de assincronicidade que eu não tinha entendido e que o Denis me mostrou, o que gerava a\r\n * não gravação do objeto ou a sua gravação no estado global sem o 'id'.\r\n * Muito obrigado, Denis, pela ajuda aqui!\r\n */\r\n","import PropTypes from 'prop-types';\r\nimport React, { Component } from 'react';\r\nimport { connect } from 'react-redux';\r\n\r\nclass Header extends Component {\r\n  constructor(props) {\r\n    super(props);\r\n    this.state = {};\r\n    this.updateExpenses = this.updateExpenses.bind(this);\r\n  }\r\n\r\n  componentDidMount() {\r\n    this.updateExpenses();\r\n  }\r\n\r\n  componentDidUpdate(previousProps) {\r\n    const { expenses } = this.props;\r\n    if (previousProps.expenses !== expenses) {\r\n      this.updateExpenses();\r\n    }\r\n  }\r\n\r\n  updateExpenses() {\r\n    const { expenses } = this.props;\r\n    return expenses;\r\n  }\r\n\r\n  render() {\r\n    const { email, expenses } = this.props;\r\n    let totalExpenses = 0;\r\n    if (expenses !== undefined) {\r\n      totalExpenses = expenses.reduce((acc, currExpense) => {\r\n        acc += currExpense.value * currExpense.exchangeRates[currExpense.currency].ask;\r\n        return acc;\r\n      }, 0);\r\n    }\r\n    return (\r\n      <header>\r\n        <h3 data-testid=\"email-field\">{`Email: ${email}`}</h3>\r\n        <p>\r\n          {'Total de despesas: '}\r\n          <span data-testid=\"total-field\">{ `${totalExpenses.toFixed(2)}` }</span>\r\n          <span data-testid=\"header-currency-field\"> BRL</span>\r\n        </p>\r\n      </header>\r\n    );\r\n  }\r\n}\r\n\r\nHeader.propTypes = {\r\n  email: PropTypes.string.isRequired,\r\n  expenses: PropTypes.arrayOf(PropTypes.shape()).isRequired,\r\n};\r\n\r\nconst mapStatetoProps = (state) => ({\r\n  email: state.user.email,\r\n  expenses: state.wallet.expenses,\r\n});\r\n\r\nexport default connect(mapStatetoProps)(Header);\r\n","import PropTypes from 'prop-types';\r\nimport React, { Component } from 'react';\r\nimport { connect } from 'react-redux';\r\nimport { deleteExpenseAction } from '../actions';\r\n\r\nclass TableExpenses extends Component {\r\n  constructor() {\r\n    super();\r\n    this.deleteExpense = this.deleteExpense.bind(this);\r\n  }\r\n\r\n  componentDidUpdate() {\r\n    const rows = document.getElementsByTagName('tr');\r\n    console.log(rows);\r\n  }\r\n\r\n  deleteExpense(receivedId) {\r\n    const { dispatchDelete } = this.props;\r\n    dispatchDelete(receivedId);\r\n    // this.updateExpenses();\r\n  }\r\n\r\n  render() {\r\n    const { expenses } = this.props;\r\n    const expensesTitles = ['Descrição', 'Tag', 'Método de pagamento', 'Valor', 'Moeda',\r\n      'Câmbio utilizado', 'Valor convertido', 'Moeda de conversão', 'Editar/Excluir',\r\n    ];\r\n    if (expenses.length > 0) {\r\n      return (\r\n        <table>\r\n          <thead>\r\n            <tr>\r\n              {expensesTitles.map((title, index) => (\r\n                <th key={ `${title}${index}` }>{ title }</th>\r\n              ))}\r\n            </tr>\r\n          </thead>\r\n          <tbody>\r\n            {expenses.map((expense) => {\r\n              const { description, value, currency,\r\n                method, tag, exchangeRates } = expense;\r\n              const currentExchangeRate = exchangeRates[currency];\r\n              const parsedAsk = Number(currentExchangeRate.ask);\r\n              return (\r\n                <tr key={ expense.id }>\r\n                  <td>{ description }</td>\r\n                  <td>{ tag }</td>\r\n                  <td>{ method }</td>\r\n                  <td>{ value }</td>\r\n                  <td>{ currentExchangeRate.name.split('/')[0] }</td>\r\n                  <td>{ parsedAsk.toFixed(2) }</td>\r\n                  <td>{ (value * parsedAsk).toFixed(2) }</td>\r\n                  <td>Real</td>\r\n                  <td>\r\n                    <button type=\"button\" data-testid=\"edit-btn\">Editar</button>\r\n                    <button\r\n                      onClick={ () => this.deleteExpense(expense) }\r\n                      type=\"button\"\r\n                      data-testid=\"delete-btn\"\r\n                    >\r\n                      Excluir\r\n                    </button>\r\n                  </td>\r\n                </tr>\r\n              );\r\n            })}\r\n          </tbody>\r\n        </table>\r\n      );\r\n    }\r\n    return <h1>Você não tem despesas cadastradas.</h1>;\r\n  }\r\n}\r\n\r\nTableExpenses.propTypes = {\r\n  dispatchDelete: PropTypes.func.isRequired,\r\n  expenses: PropTypes.shape({\r\n    length: PropTypes.number,\r\n    map: PropTypes.func,\r\n  }).isRequired,\r\n};\r\n\r\nconst mapStateToProps = (state) => ({\r\n  expenses: state.wallet.expenses,\r\n});\r\n\r\nconst mapDispatchToProps = (dispatch) => ({\r\n  dispatchDelete: (payload) => dispatch(deleteExpenseAction(payload)),\r\n});\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(TableExpenses);\r\n\r\n/**\r\n * Componente desenvolvido para cumprir o requisito 7\r\n * Obtive ajuda dos amigos João Paulo Pereira, Valdênio e Rafael Moura\r\n * Muito obrigado e #VQV\r\n */\r\n","import React from 'react';\r\nimport Expenses from '../components/Expenses';\r\nimport Header from '../components/Header';\r\nimport TableExpenses from '../components/TableExpenses';\r\n\r\nclass Wallet extends React.Component {\r\n  render() {\r\n    return (\r\n      <>\r\n        <Header />\r\n        <main>\r\n          <section>\r\n            <Expenses />\r\n          </section>\r\n          <section>\r\n            <h1>Carteira</h1>\r\n            <article>\r\n              <h3>Despesas:</h3>\r\n              <TableExpenses />\r\n            </article>\r\n          </section>\r\n        </main>\r\n      </>\r\n    );\r\n  }\r\n}\r\n\r\nexport default Wallet;\r\n","import React from 'react';\r\nimport { Route, Switch } from 'react-router';\r\nimport Login from './pages/Login';\r\nimport Wallet from './pages/Wallet';\r\n\r\nfunction App() {\r\n  return (\r\n    <div>\r\n      <h1>Hello, TrybeWallet!</h1>\r\n      <Switch>\r\n        <Route path=\"/carteira\" component={ Wallet } />\r\n        <Route path=\"/\" component={ Login } />\r\n      </Switch>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.0/8 are considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl, {\r\n    headers: { 'Service-Worker': 'script' },\r\n  })\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready\r\n      .then(registration => {\r\n        registration.unregister();\r\n      })\r\n      .catch(error => {\r\n        console.error(error.message);\r\n      });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport { BrowserRouter } from 'react-router-dom';\r\nimport './index.css';\r\nimport { Provider } from 'react-redux';\r\nimport store from './store';\r\nimport App from './App';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nReactDOM.render(\r\n  <BrowserRouter>\r\n    <Provider store={ store }>\r\n      <App />\r\n    </Provider>\r\n  </BrowserRouter>,\r\n  document.getElementById('root'),\r\n);\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}